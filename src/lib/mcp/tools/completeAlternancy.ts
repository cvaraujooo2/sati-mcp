/**
 * Complete Alternancy Tool
 * Marca uma sess√£o de altern√¢ncia como completada e calcula estat√≠sticas
 */

import { z } from 'zod';
import { createClient } from '@/lib/supabase/server';
import { DatabaseError, NotFoundError, BusinessLogicError } from '@/lib/utils/errors';
import { toolLogger } from '@/lib/utils/logger';
import { McpToolMetadata, AUTH_SCOPES } from '../types/metadata';

const log = toolLogger.child({ tool: 'completeAlternancy' });

const completeAlternancySchema = z.object({
  sessionId: z.string().uuid('sessionId inv√°lido'),
  feedback: z.string().max(500).optional(),
});

export type CompleteAlternancyInput = z.infer<typeof completeAlternancySchema>;

export async function completeAlternancyHandler(
  input: CompleteAlternancyInput,
  userId: string
) {
  log.info({ userId, input }, 'Completando sess√£o de altern√¢ncia');

  try {
    const supabase = await createClient();
    const validated = completeAlternancySchema.parse(input);

    // 1. Buscar sess√£o
    const { data: session, error: sessionError } = await supabase
      .from('alternancy_sessions')
      .select('*')
      .eq('id', validated.sessionId)
      .maybeSingle();

    if (sessionError) {
      log.error({ error: sessionError }, 'Erro ao buscar sess√£o');
      throw new DatabaseError('Falha ao buscar sess√£o de altern√¢ncia');
    }

    if (!session) {
      log.warn({ sessionId: validated.sessionId }, 'Sess√£o n√£o encontrada');
      throw new NotFoundError('Sess√£o de altern√¢ncia');
    }

    // 2. Validar ownership
    const hyperfocusSequence = session.hyperfocus_sequence as Array<{
      hyperfocusId: string;
      hyperfocusTitle: string;
      color: string;
      durationMinutes: number;
    }>;

    if (!hyperfocusSequence || hyperfocusSequence.length === 0) {
      log.error({ sessionId: validated.sessionId }, 'Sess√£o sem hiperfocos');
      throw new BusinessLogicError('Sess√£o de altern√¢ncia inv√°lida');
    }

    const firstHyperfocusId = hyperfocusSequence[0].hyperfocusId;
    const { data: hyperfocus, error: hyperfocusError } = await supabase
      .from('hyperfocus')
      .select('user_id')
      .eq('id', firstHyperfocusId)
      .maybeSingle();

    if (hyperfocusError) {
      log.error({ error: hyperfocusError }, 'Erro ao validar ownership');
      throw new DatabaseError('Falha ao validar hiperfoco');
    }

    if (!hyperfocus || hyperfocus.user_id !== userId) {
      log.warn({ sessionId: validated.sessionId, userId }, 'Sess√£o n√£o pertence ao usu√°rio');
      throw new BusinessLogicError('Sess√£o n√£o pertence ao usu√°rio');
    }

    // 3. Verificar se j√° foi completada
    if (session.status === 'completed') {
      log.warn({ sessionId: validated.sessionId }, 'Sess√£o j√° foi completada');
      throw new BusinessLogicError('Sess√£o j√° foi completada');
    }

    // 4. Calcular estat√≠sticas
    const completedAt = new Date().toISOString();
    let actualDurationMinutes = 0;

    if (session.started_at) {
      const startTime = new Date(session.started_at).getTime();
      const endTime = new Date(completedAt).getTime();
      actualDurationMinutes = Math.round((endTime - startTime) / 1000 / 60);
    }

    // Calcular dura√ß√£o planejada total
    const plannedDurationMinutes = hyperfocusSequence.reduce(
      (sum, h) => sum + h.durationMinutes,
      0
    );

    // Adicionar breaks entre hiperfocos
    const transitionBreakMinutes = session.transition_break_minutes || 5;
    const totalPlannedMinutes =
      plannedDurationMinutes + (hyperfocusSequence.length - 1) * transitionBreakMinutes;

    // Calcular efici√™ncia
    const efficiency =
      totalPlannedMinutes > 0
        ? Math.round((actualDurationMinutes / totalPlannedMinutes) * 100)
        : 100;

    // 5. Atualizar sess√£o
    const { error: updateError } = await supabase
      .from('alternancy_sessions')
      .update({
        status: 'completed',
        completed_at: completedAt,
        actual_duration_minutes: actualDurationMinutes,
        feedback: validated.feedback,
      })
      .eq('id', validated.sessionId);

    if (updateError) {
      log.error({ error: updateError }, 'Erro ao completar sess√£o');
      throw new DatabaseError('Falha ao completar altern√¢ncia');
    }

    log.info(
      {
        sessionId: validated.sessionId,
        userId,
        actualDurationMinutes,
        efficiency,
      },
      'Sess√£o de altern√¢ncia completada com sucesso'
    );

    // 6. Gerar feedback motivacional baseado na performance
    let performanceFeedback = '';
    if (efficiency >= 95) {
      performanceFeedback =
        'üåü Excepcional! Voc√™ manteve o ritmo planejado perfeitamente.';
    } else if (efficiency >= 80) {
      performanceFeedback = '‚ú® √ìtima sess√£o! Voc√™ ficou muito pr√≥ximo do planejado.';
    } else if (efficiency >= 60) {
      performanceFeedback =
        'üëç Boa sess√£o! Continue praticando para melhorar a consist√™ncia.';
    } else {
      performanceFeedback =
        'üí™ Sess√£o desafiadora. Considere reduzir a dura√ß√£o ou aumentar os breaks.';
    }

    // 7. Retornar estado completado
    return {
      structuredContent: {
        type: 'alternancy_completed',
        sessionId: validated.sessionId,
        status: 'completed',
        completedAt,
        actualDurationMinutes,
        plannedDurationMinutes: totalPlannedMinutes,
        efficiency,
        hyperfocusCount: hyperfocusSequence.length,
        performanceFeedback,
      },
      component: {
        type: 'inline',
        name: 'AlternancyFlow',
        props: {
          sessionId: validated.sessionId,
          name: session.name,
          status: 'completed',
          completedAt,
          actualDurationMinutes,
          plannedDurationMinutes: totalPlannedMinutes,
          efficiency,
          sequence: hyperfocusSequence,
          transitionBreakMinutes,
        },
      },
      textContent: `üéâ Sess√£o de altern√¢ncia "${session.name}" completada! ${actualDurationMinutes}min de foco em ${hyperfocusSequence.length} hiperfocos. ${performanceFeedback}`,
    };
  } catch (error) {
    log.error({ error, userId, input }, 'Erro ao completar altern√¢ncia');
    throw error;
  }
}

export const completeAlternancyMetadata: McpToolMetadata = {
  name: 'completeAlternancy',
  description: 'Use this tool to mark an alternancy session as completed and calculate performance statistics. Provides encouraging feedback based on efficiency and adherence to planned schedule. Particularly useful for tracking neurodivergent users\' focus patterns.',
  inputSchema: {
    type: 'object',
    properties: {
      sessionId: {
        type: 'string',
        format: 'uuid',
        description: 'ID of the alternancy session to complete',
      },
      feedback: {
        type: 'string',
        maxLength: 500,
        description: 'Optional user feedback about the session',
      },
    },
    required: ['sessionId'],
  },
  _meta: {
    readOnly: false,
    requiresConfirmation: false,
    requiresAuth: true,
    allowAnonymous: false,
    authScopes: [AUTH_SCOPES.ALTERNANCY_WRITE],
    category: 'timer',
    tags: ['focus', 'alternancy', 'complete', 'statistics'],
    rateLimitTier: 'medium',
    'openai/outputTemplate': 'AlternancyFlow',
  },
};
