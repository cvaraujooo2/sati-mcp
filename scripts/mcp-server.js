#!/usr/bin/env node

/**
 * MCP Server STDIO para Sati
 * 
 * Este é um servidor MCP standalone que roda via STDIO
 * Para usar com MCP Inspector:
 * Transport Type: STDIO
 * Command: node mcp-server.js
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';

// Simulação simples - em produção isso viria do Supabase
const hyperfocos = [];
const tasks = new Map();

// Criar servidor MCP
const server = new Server(
  {
    name: 'sati-mcp',
    version: '0.1.0',
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// Handler: Listar Tools
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: 'createHyperfocus',
        description:
          'Creates a new hyperfocus area to help neurodivergent users organize an intense interest or project.',
        inputSchema: {
          type: 'object',
          properties: {
            title: {
              type: 'string',
              description: 'The title/name of the hyperfocus (1-100 characters)',
            },
            description: {
              type: 'string',
              description: 'Optional description',
            },
            color: {
              type: 'string',
              enum: ['red', 'green', 'blue', 'orange', 'purple', 'pink', 'brown', 'gray'],
              default: 'blue',
            },
            estimatedTimeMinutes: {
              type: 'number',
              minimum: 5,
              maximum: 480,
            },
          },
          required: ['title'],
        },
      },
      {
        name: 'createTask',
        description: 'Creates a new task inside an existing hyperfocus (mocked).',
        inputSchema: {
          type: 'object',
          properties: {
            hyperfocusId: {
              type: 'string',
              description: 'Hyperfocus id generated by createHyperfocus',
            },
            title: {
              type: 'string',
              description: 'Task title (1-200 characters)',
            },
          },
          required: ['hyperfocusId', 'title'],
        },
      },
      {
        name: 'updateTaskStatus',
        description: 'Toggle completion state of a task inside a hyperfocus (mocked).',
        inputSchema: {
          type: 'object',
          properties: {
            hyperfocusId: {
              type: 'string',
              description: 'Hyperfocus id generated by createHyperfocus',
            },
            taskId: {
              type: 'string',
              description: 'Task id generated by createTask',
            },
            completed: {
              type: 'boolean',
              description: 'New completion state',
            },
          },
          required: ['hyperfocusId', 'taskId', 'completed'],
        },
      },
    ],
  };
});

// Handler: Chamar Tool
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  if (name === 'createHyperfocus') {
    // Validação básica
    if (!args.title || typeof args.title !== 'string') {
      throw new Error('Title is required and must be a string');
    }

    // Criar hiperfoco (simulado)
    const hyperfocus = {
      id: `hf-${Date.now()}`,
      title: args.title,
      description: args.description || null,
      color: args.color || 'blue',
      estimatedTimeMinutes: args.estimatedTimeMinutes || null,
      createdAt: new Date().toISOString(),
      taskCount: 0,
    };

    hyperfocos.push(hyperfocus);
    tasks.set(hyperfocus.id, []);

    return {
      content: [
        {
          type: 'json',
          json: {
            result: {
              structuredContent: {
                type: 'hyperfocus_created',
                hyperfocusId: hyperfocus.id,
                title: hyperfocus.title,
                description: hyperfocus.description,
                color: hyperfocus.color,
                estimatedTimeMinutes: hyperfocus.estimatedTimeMinutes,
                createdAt: hyperfocus.createdAt,
                taskCount: 0,
              },
              component: {
                type: 'inline',
                name: 'HyperfocusCard',
                props: {
                  hyperfocus: {
                    id: hyperfocus.id,
                    title: hyperfocus.title,
                    description: hyperfocus.description,
                    color: hyperfocus.color,
                    estimatedTimeMinutes: hyperfocus.estimatedTimeMinutes,
                    taskCount: 0,
                  },
                },
              },
            },
          },
        },
      ],
    };
  }

  if (name === 'createTask') {
    const { hyperfocusId, title } = args;

    if (!hyperfocusId || !title) {
      throw new Error('hyperfocusId and title are required');
    }

    const hyperfocus = hyperfocos.find((hf) => hf.id === hyperfocusId);
    if (!hyperfocus) {
      throw new Error(`Hyperfocus ${hyperfocusId} not found`);
    }

    const hyperfocusTasks = tasks.get(hyperfocusId) ?? [];
    const task = {
      id: `task-${Date.now()}`,
      title,
      completed: false,
    };

    hyperfocusTasks.push(task);
    tasks.set(hyperfocusId, hyperfocusTasks);

    return {
      content: [
        {
          type: 'json',
          json: {
            result: {
              structuredContent: {
                type: 'task_created',
                task,
              },
              component: {
                type: 'inline',
                name: 'TaskBreakdown',
                props: {
                  hyperfocusId,
                  hyperfocusTitle: hyperfocus.title,
                  tasks: hyperfocusTasks,
                },
              },
            },
          },
        },
      ],
    };
  }

  if (name === 'updateTaskStatus') {
    const { hyperfocusId, taskId, completed } = args;

    if (!hyperfocusId || !taskId || typeof completed !== 'boolean') {
      throw new Error('hyperfocusId, taskId and completed are required');
    }

    const hyperfocus = hyperfocos.find((hf) => hf.id === hyperfocusId);
    if (!hyperfocus) {
      throw new Error(`Hyperfocus ${hyperfocusId} not found`);
    }

    const hyperfocusTasks = tasks.get(hyperfocusId) ?? [];
    const task = hyperfocusTasks.find((item) => item.id === taskId);

    if (!task) {
      throw new Error(`Task ${taskId} not found inside hyperfocus ${hyperfocusId}`);
    }

    task.completed = completed;

    return {
      content: [
        {
          type: 'json',
          json: {
            result: {
              structuredContent: {
                type: 'task_status_updated',
                task: {
                  id: task.id,
                  title: task.title,
                  completed: task.completed,
                },
              },
              component: {
                type: 'inline',
                name: 'TaskBreakdown',
                props: {
                  hyperfocusId,
                  hyperfocusTitle: hyperfocus.title,
                  tasks: hyperfocusTasks,
                },
              },
            },
          },
        },
      ],
    };
  }

  throw new Error(`Unknown tool: ${name}`);
});

// Iniciar servidor via STDIO
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error('Sati MCP Server running on stdio');
}

main().catch((error) => {
  console.error('Fatal error:', error);
  process.exit(1);
});

