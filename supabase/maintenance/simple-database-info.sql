-- ============================================================================
-- INFORMA√á√ïES B√ÅSICAS DO BANCO DE DADOS - SATI MCP (SAFE VERSION)
-- ============================================================================
-- 
-- Script simplificado que n√£o vai quebrar mesmo se tabelas n√£o existirem
--
-- Execute este script no Supabase SQL Editor
-- URL: https://supabase.com/dashboard/project/clhexsbqfbvbkfvefapi/sql
-- ============================================================================

-- ============================================================================
-- üìã RESUMO R√ÅPIDO
-- ============================================================================

SELECT 
  'üóÇÔ∏è  TABELAS' as categoria,
  COUNT(*)::text as quantidade
FROM pg_tables
WHERE schemaname = 'public'

UNION ALL

SELECT 
  'üîë PRIMARY KEYS' as categoria,
  COUNT(*)::text as quantidade
FROM information_schema.table_constraints
WHERE constraint_type = 'PRIMARY KEY'
  AND table_schema = 'public'

UNION ALL

SELECT 
  'üîó FOREIGN KEYS' as categoria,
  COUNT(*)::text as quantidade
FROM information_schema.table_constraints
WHERE constraint_type = 'FOREIGN KEY'
  AND table_schema = 'public'

UNION ALL

SELECT 
  'üìä √çNDICES' as categoria,
  COUNT(*)::text as quantidade
FROM pg_indexes
WHERE schemaname = 'public'

UNION ALL

SELECT 
  'üîí RLS ATIVO' as categoria,
  COUNT(*)::text as quantidade
FROM pg_tables
WHERE schemaname = 'public'
  AND rowsecurity = true

UNION ALL

SELECT 
  'üíæ TAMANHO TOTAL' as categoria,
  pg_size_pretty(SUM(pg_total_relation_size(schemaname||'.'||tablename)))::text as quantidade
FROM pg_tables
WHERE schemaname = 'public';

-- ============================================================================
-- üìä TODAS AS TABELAS DO SCHEMA PUBLIC
-- ============================================================================

SELECT 
  tablename as "üìã Tabela",
  tableowner as "üë§ Owner",
  CASE 
    WHEN rowsecurity THEN 'üîí Ativo'
    ELSE 'üîì Desativado'
  END as "RLS",
  pg_size_pretty(pg_total_relation_size('public.' || tablename)) as "üíæ Tamanho"
FROM pg_tables
WHERE schemaname = 'public'
ORDER BY tablename;

-- ============================================================================
-- üèóÔ∏è  ESTRUTURA DE CADA TABELA
-- ============================================================================

SELECT 
  table_name as "üìã Tabela",
  column_name as "üìù Coluna",
  data_type as "üî§ Tipo",
  CASE 
    WHEN character_maximum_length IS NOT NULL 
    THEN '(' || character_maximum_length::text || ')'
    ELSE ''
  END as "üìè Tamanho",
  CASE 
    WHEN is_nullable = 'YES' THEN '‚úÖ'
    ELSE '‚ùå'
  END as "Null?",
  COALESCE(column_default, '-') as "üîß Default"
FROM information_schema.columns
WHERE table_schema = 'public'
ORDER BY table_name, ordinal_position;

-- ============================================================================
-- üîë PRIMARY KEYS
-- ============================================================================

SELECT 
  tc.table_name as "üìã Tabela",
  kcu.column_name as "üîë Coluna PK",
  tc.constraint_name as "üè∑Ô∏è  Nome Constraint"
FROM information_schema.table_constraints tc
JOIN information_schema.key_column_usage kcu 
  ON tc.constraint_name = kcu.constraint_name
WHERE tc.constraint_type = 'PRIMARY KEY'
  AND tc.table_schema = 'public'
ORDER BY tc.table_name;

-- ============================================================================
-- üîó FOREIGN KEYS (RELACIONAMENTOS)
-- ============================================================================

SELECT 
  tc.table_name as "üìã Tabela Origem",
  kcu.column_name as "üìù Coluna Origem",
  ccu.table_name AS "üéØ Tabela Destino",
  ccu.column_name AS "üîë Coluna Destino",
  tc.constraint_name as "üè∑Ô∏è  Nome Constraint"
FROM information_schema.table_constraints AS tc 
JOIN information_schema.key_column_usage AS kcu
  ON tc.constraint_name = kcu.constraint_name
  AND tc.table_schema = kcu.table_schema
JOIN information_schema.constraint_column_usage AS ccu
  ON ccu.constraint_name = tc.constraint_name
  AND ccu.table_schema = tc.table_schema
WHERE tc.constraint_type = 'FOREIGN KEY'
  AND tc.table_schema = 'public'
ORDER BY tc.table_name;

-- ============================================================================
-- üìä √çNDICES
-- ============================================================================

SELECT 
  tablename as "üìã Tabela",
  indexname as "üîç Nome √çndice",
  indexdef as "üìù Defini√ß√£o"
FROM pg_indexes
WHERE schemaname = 'public'
ORDER BY tablename, indexname;

-- ============================================================================
-- üîí STATUS DO RLS (ROW LEVEL SECURITY)
-- ============================================================================

SELECT 
  tablename as "üìã Tabela",
  CASE 
    WHEN rowsecurity THEN 'üîí ATIVO'
    ELSE 'üîì DESATIVADO'
  END as "Status RLS"
FROM pg_tables
WHERE schemaname = 'public'
ORDER BY tablename;

-- ============================================================================
-- üìú POL√çTICAS RLS (se houver)
-- ============================================================================

SELECT 
  tablename as "üìã Tabela",
  policyname as "üìú Nome Pol√≠tica",
  CASE 
    WHEN permissive = 'PERMISSIVE' THEN '‚úÖ Permissiva'
    ELSE '‚ùå Restritiva'
  END as "Tipo",
  cmd as "üéØ Comando",
  roles::text as "üë• Roles"
FROM pg_policies
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- ============================================================================
-- üìà CONTAGEM DE REGISTROS (DIN√ÇMICA - S√ì TABELAS EXISTENTES)
-- ============================================================================

DO $$
DECLARE
  r RECORD;
  sql TEXT;
  cnt BIGINT;
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó';
  RAISE NOTICE '‚ïë                                                       ‚ïë';
  RAISE NOTICE '‚ïë         üìä CONTAGEM DE REGISTROS POR TABELA           ‚ïë';
  RAISE NOTICE '‚ïë                                                       ‚ïë';
  RAISE NOTICE '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù';
  RAISE NOTICE '';
  
  FOR r IN 
    SELECT table_name 
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
    ORDER BY table_name
  LOOP
    sql := format('SELECT COUNT(*) FROM public.%I', r.table_name);
    EXECUTE sql INTO cnt;
    RAISE NOTICE '  üìã % : % registros', RPAD(r.table_name, 25), cnt;
  END LOOP;
  
  RAISE NOTICE '';
END $$;

-- ============================================================================
-- üé® DIAGRAMA ER (FORMATO TEXTO)
-- ============================================================================

SELECT 
  'üìã ' || tc.table_name || ' ‚îÄ‚îÄ[' || kcu.column_name || ']‚îÄ‚îÄ> üéØ ' || 
  ccu.table_name || ' [' || ccu.column_name || ']' as "üîó Relacionamentos"
FROM information_schema.table_constraints AS tc 
JOIN information_schema.key_column_usage AS kcu
  ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage AS ccu
  ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY'
  AND tc.table_schema = 'public'
ORDER BY tc.table_name;

-- ============================================================================
-- üîç VERIFICAR QUAIS TABELAS DO SATI EXISTEM
-- ============================================================================

SELECT 
  t.expected_table as "üìã Tabela Esperada",
  CASE 
    WHEN EXISTS (
      SELECT 1 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
        AND table_name = t.expected_table
    ) THEN '‚úÖ Existe'
    ELSE '‚ùå N√£o existe'
  END as "Status"
FROM (
  VALUES 
    ('hyperfocus'),
    ('tasks'),
    ('focus_sessions'),
    ('alternancies')
) AS t(expected_table)
ORDER BY expected_table;

-- ============================================================================
-- ‚úÖ FIM DA INSPE√á√ÉO B√ÅSICA
-- ============================================================================

